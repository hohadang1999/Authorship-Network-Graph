<!DOCTYPE html>
<meta charset="utf-8">
<style>

.link {
  stroke: #000;
}

.node {
  stroke: #fff;
}

</style>
<body>
    <header>
        <h1>Authorship Network</h1>
    </header>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var width = 960,
    height = 500;

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);

var force = d3.layout.force()
    .size([width, height]);

d3.csv("publications.csv", function(links) {
 

  var nodesByName = {};

 
  links.forEach(function(link) {
    link.authors = nodeByName(link.authors);
    link.title = nodeByName(link.title);
    link.pubURL = nodeByName(link.pubURL);
  });

  
  var nodes = d3.values(nodesByName);

  
  var link = svg.selectAll(".link")
      .data(links)
    .enter().append("line")
      .attr("class", "link");

  
  var node = svg.selectAll(".node")
      .data(nodes)
    .enter().append("circle")
      .attr("class", "node")
      .attr("r", 4.5)
      .call(force.drag);

  
  force
      .nodes(nodes)
      .links(links)
      .on("tick", tick)
      .start();

  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .on("click", click)
      .call(force.drag);
 
 
  


  var setEvents = nodeEnter
          .on( 'click', function (d) { 
              d3.select("h1").html ("Take me to " + "<a href='" + d.pubURL + "' >"); 
           })

          .on( 'mouseenter', function() {
            
            d3.select( this )
              .transition()
              .attr("x", function(d) { return -60;})
              .attr("y", function(d) { return -60;})
              .attr("height", 100)
              .attr("width", 100);
          })
          
          .on( 'mouseleave', function() {
            d3.select( this )
              .transition()
              .attr("x", function(d) { return -25;})
              .attr("y", function(d) { return -25;})
              .attr("height", 50)
              .attr("width", 50);
          });
  function tick() {
    link.attr("x1", function(d) { return d.authors.x; })
        .attr("y1", function(d) { return d.authors.y; })
        .attr("x2", function(d) { return d.title.x; })
        .attr("y2", function(d) { return d.title.y; });

    node.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

  function nodeByName(authors) {
    return nodesByName[authors] || (nodesByName[authors] = {authors: authors});
  }
    
    function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
    }
});
</script>
